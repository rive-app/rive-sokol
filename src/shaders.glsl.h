#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input assets/shaders.glsl --output src/shaders.glsl.h --slang glsl330

    Overview:

        Shader program 'rive_debug_contour':
            Get shader desc: rive_debug_contour_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_position = 0
                Uniform block 'vs_params':
                    C struct: vs_params_t
                    Bind slot: SLOT_vs_params = 0
            Fragment shader: debug_contour
                Uniform block 'fs_contour':
                    C struct: fs_contour_t
                    Bind slot: SLOT_fs_contour = 0

        Shader program 'rive_shader':
            Get shader desc: rive_shader_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_position = 0
                Uniform block 'vs_params':
                    C struct: vs_params_t
                    Bind slot: SLOT_vs_params = 0
            Fragment shader: fs
                Uniform block 'fs_paint':
                    C struct: fs_paint_t
                    Bind slot: SLOT_fs_paint = 0


    Shader descriptor structs:

        sg_shader rive_debug_contour = sg_make_shader(rive_debug_contour_shader_desc(sg_query_backend()));
        sg_shader rive_shader = sg_make_shader(rive_shader_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_position] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]


    Bind slot and C-struct for uniform block 'vs_params':

        vs_params_t vs_params = {
            .projection = ...;
            .transform = ...;
            .transformLocal = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_params, &SG_RANGE(vs_params));

    Bind slot and C-struct for uniform block 'fs_paint':

        fs_paint_t fs_paint = {
            .colors = ...;
            .stops = ...;
            .gradientStart = ...;
            .gradientStop = ...;
            .fillType = ...;
            .stopCount = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fs_paint, &SG_RANGE(fs_paint));

    Bind slot and C-struct for uniform block 'fs_contour':

        fs_contour_t fs_contour = {
            .color = ...;
            .solidColor = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fs_contour, &SG_RANGE(fs_contour));

*/
#include <stdint.h>
#include <stdbool.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_vs_position (0)
#define SLOT_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_params_t {
    float projection[16];
    float transform[16];
    float transformLocal[16];
} vs_params_t;
#pragma pack(pop)
#define SLOT_fs_paint (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_paint_t {
    float colors[16][4];
    float stops[16][4];
    float gradientStart[2];
    float gradientStop[2];
    float fillType;
    float stopCount;
    uint8_t _pad_536[8];
} fs_paint_t;
#pragma pack(pop)
#define SLOT_fs_contour (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_contour_t {
    float color[4];
    float solidColor[4];
} fs_contour_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 vs_params[12];
    layout(location = 0) in vec2 position;
    out vec2 vxPosition;
    
    void main()
    {
        vec4 _20 = vec4(position, 0.0, 1.0);
        gl_Position = (mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * mat4(vs_params[4], vs_params[5], vs_params[6], vs_params[7])) * _20;
        vxPosition = (mat4(vs_params[8], vs_params[9], vs_params[10], vs_params[11]) * _20).xy;
    }
    
*/
static const char vs_source_glsl330[405] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x32,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,
    0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x78,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,
    0x30,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x28,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,
    0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,
    0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,
    0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2c,
    0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x29,0x20,0x2a,0x20,
    0x5f,0x32,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x78,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x39,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x31,0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x31,0x31,0x5d,0x29,0x20,0x2a,0x20,0x5f,0x32,0x30,0x29,0x2e,0x78,0x79,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 fs_paint[34];
    layout(location = 0) out vec4 fragColor;
    in vec2 vxPosition;
    
    void main()
    {
        int _25 = int(fs_paint[33].y);
        int _30 = int(fs_paint[33].x);
        if (_30 == 1)
        {
            fragColor = vec4(fs_paint[0].xyz * fs_paint[0].w, fs_paint[0].w);
        }
        else
        {
            if (_30 == 2)
            {
                vec2 _69 = fs_paint[32].zw - fs_paint[32].xy;
                float _74 = _69.x;
                float _80 = _69.y;
                float _95 = dot(vxPosition - fs_paint[32].xy, _69) / ((_74 * _74) + (_80 * _80));
                vec4 color = mix(fs_paint[0], fs_paint[1], vec4(smoothstep(fs_paint[16].x, fs_paint[17].x, _95)));
                for (int i = 1; i < 16; i++)
                {
                    if (i >= (_25 - 1))
                    {
                        break;
                    }
                    int _128 = i + 1;
                    color = mix(color, fs_paint[_128 * 1 + 0], vec4(smoothstep(fs_paint[i * 1 + 16].x, fs_paint[_128 * 1 + 16].x, _95)));
                }
                fragColor = vec4(color.xyz * color.w, color.w);
            }
            else
            {
                if (_30 == 3)
                {
                    float _170 = distance(fs_paint[32].xy, vxPosition) / distance(fs_paint[32].xy, fs_paint[32].zw);
                    vec4 color_1 = mix(fs_paint[0], fs_paint[1], vec4(smoothstep(fs_paint[16].x, fs_paint[17].x, _170)));
                    for (int i_1 = 1; i_1 < 16; i_1++)
                    {
                        if (i_1 >= (_25 - 1))
                        {
                            break;
                        }
                        int _201 = i_1 + 1;
                        color_1 = mix(color_1, fs_paint[_201 * 1 + 0], vec4(smoothstep(fs_paint[i_1 * 1 + 16].x, fs_paint[_201 * 1 + 16].x, _170)));
                    }
                    fragColor = vec4(color_1.xyz * color_1.w, color_1.w);
                }
                else
                {
                    fragColor = vec4(0.0, 0.0, 0.0, 1.0);
                }
            }
        }
    }
    
*/
static const char fs_source_glsl330[1955] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x70,0x61,
    0x69,0x6e,0x74,0x5b,0x33,0x34,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x78,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x35,
    0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x66,0x73,0x5f,0x70,0x61,0x69,0x6e,0x74,0x5b,
    0x33,0x33,0x5d,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,
    0x5f,0x33,0x30,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x66,0x73,0x5f,0x70,0x61,0x69,
    0x6e,0x74,0x5b,0x33,0x33,0x5d,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x5f,0x33,0x30,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x43,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x66,0x73,0x5f,0x70,
    0x61,0x69,0x6e,0x74,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x66,0x73,
    0x5f,0x70,0x61,0x69,0x6e,0x74,0x5b,0x30,0x5d,0x2e,0x77,0x2c,0x20,0x66,0x73,0x5f,
    0x70,0x61,0x69,0x6e,0x74,0x5b,0x30,0x5d,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,
    0x30,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x32,0x20,0x5f,0x36,0x39,0x20,0x3d,0x20,0x66,0x73,0x5f,0x70,0x61,0x69,0x6e,
    0x74,0x5b,0x33,0x32,0x5d,0x2e,0x7a,0x77,0x20,0x2d,0x20,0x66,0x73,0x5f,0x70,0x61,
    0x69,0x6e,0x74,0x5b,0x33,0x32,0x5d,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x37,
    0x34,0x20,0x3d,0x20,0x5f,0x36,0x39,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x38,0x30,
    0x20,0x3d,0x20,0x5f,0x36,0x39,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x39,0x35,0x20,
    0x3d,0x20,0x64,0x6f,0x74,0x28,0x76,0x78,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x2d,0x20,0x66,0x73,0x5f,0x70,0x61,0x69,0x6e,0x74,0x5b,0x33,0x32,0x5d,0x2e,
    0x78,0x79,0x2c,0x20,0x5f,0x36,0x39,0x29,0x20,0x2f,0x20,0x28,0x28,0x5f,0x37,0x34,
    0x20,0x2a,0x20,0x5f,0x37,0x34,0x29,0x20,0x2b,0x20,0x28,0x5f,0x38,0x30,0x20,0x2a,
    0x20,0x5f,0x38,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x6d,0x69,0x78,0x28,0x66,0x73,0x5f,0x70,0x61,0x69,0x6e,0x74,0x5b,0x30,0x5d,
    0x2c,0x20,0x66,0x73,0x5f,0x70,0x61,0x69,0x6e,0x74,0x5b,0x31,0x5d,0x2c,0x20,0x76,
    0x65,0x63,0x34,0x28,0x73,0x6d,0x6f,0x6f,0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x66,
    0x73,0x5f,0x70,0x61,0x69,0x6e,0x74,0x5b,0x31,0x36,0x5d,0x2e,0x78,0x2c,0x20,0x66,
    0x73,0x5f,0x70,0x61,0x69,0x6e,0x74,0x5b,0x31,0x37,0x5d,0x2e,0x78,0x2c,0x20,0x5f,
    0x39,0x35,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,0x3d,0x20,
    0x31,0x3b,0x20,0x69,0x20,0x3c,0x20,0x31,0x36,0x3b,0x20,0x69,0x2b,0x2b,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x69,0x20,0x3e,0x3d,0x20,0x28,0x5f,0x32,0x35,0x20,0x2d,0x20,0x31,0x29,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,0x6b,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x69,0x6e,0x74,0x20,0x5f,0x31,0x32,0x38,0x20,0x3d,0x20,0x69,0x20,0x2b,0x20,
    0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x63,
    0x6f,0x6c,0x6f,0x72,0x2c,0x20,0x66,0x73,0x5f,0x70,0x61,0x69,0x6e,0x74,0x5b,0x5f,
    0x31,0x32,0x38,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x30,0x5d,0x2c,0x20,0x76,0x65,
    0x63,0x34,0x28,0x73,0x6d,0x6f,0x6f,0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x66,0x73,
    0x5f,0x70,0x61,0x69,0x6e,0x74,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,
    0x36,0x5d,0x2e,0x78,0x2c,0x20,0x66,0x73,0x5f,0x70,0x61,0x69,0x6e,0x74,0x5b,0x5f,
    0x31,0x32,0x38,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,0x36,0x5d,0x2e,0x78,0x2c,
    0x20,0x5f,0x39,0x35,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,
    0x65,0x63,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x5f,0x33,0x30,0x20,0x3d,0x3d,0x20,0x33,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x31,0x37,0x30,0x20,0x3d,0x20,0x64,0x69,0x73,0x74,0x61,0x6e,0x63,
    0x65,0x28,0x66,0x73,0x5f,0x70,0x61,0x69,0x6e,0x74,0x5b,0x33,0x32,0x5d,0x2e,0x78,
    0x79,0x2c,0x20,0x76,0x78,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x29,0x20,0x2f,
    0x20,0x64,0x69,0x73,0x74,0x61,0x6e,0x63,0x65,0x28,0x66,0x73,0x5f,0x70,0x61,0x69,
    0x6e,0x74,0x5b,0x33,0x32,0x5d,0x2e,0x78,0x79,0x2c,0x20,0x66,0x73,0x5f,0x70,0x61,
    0x69,0x6e,0x74,0x5b,0x33,0x32,0x5d,0x2e,0x7a,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,
    0x66,0x73,0x5f,0x70,0x61,0x69,0x6e,0x74,0x5b,0x30,0x5d,0x2c,0x20,0x66,0x73,0x5f,
    0x70,0x61,0x69,0x6e,0x74,0x5b,0x31,0x5d,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x73,
    0x6d,0x6f,0x6f,0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x66,0x73,0x5f,0x70,0x61,0x69,
    0x6e,0x74,0x5b,0x31,0x36,0x5d,0x2e,0x78,0x2c,0x20,0x66,0x73,0x5f,0x70,0x61,0x69,
    0x6e,0x74,0x5b,0x31,0x37,0x5d,0x2e,0x78,0x2c,0x20,0x5f,0x31,0x37,0x30,0x29,0x29,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x5f,0x31,0x20,
    0x3d,0x20,0x31,0x3b,0x20,0x69,0x5f,0x31,0x20,0x3c,0x20,0x31,0x36,0x3b,0x20,0x69,
    0x5f,0x31,0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x69,0x5f,0x31,0x20,0x3e,0x3d,0x20,0x28,0x5f,0x32,0x35,0x20,0x2d,0x20,0x31,0x29,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x62,0x72,0x65,0x61,0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x30,0x31,0x20,0x3d,0x20,0x69,0x5f,0x31,0x20,
    0x2b,0x20,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2c,0x20,
    0x66,0x73,0x5f,0x70,0x61,0x69,0x6e,0x74,0x5b,0x5f,0x32,0x30,0x31,0x20,0x2a,0x20,
    0x31,0x20,0x2b,0x20,0x30,0x5d,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x73,0x6d,0x6f,
    0x6f,0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x66,0x73,0x5f,0x70,0x61,0x69,0x6e,0x74,
    0x5b,0x69,0x5f,0x31,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,0x36,0x5d,0x2e,0x78,
    0x2c,0x20,0x66,0x73,0x5f,0x70,0x61,0x69,0x6e,0x74,0x5b,0x5f,0x32,0x30,0x31,0x20,
    0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,0x36,0x5d,0x2e,0x78,0x2c,0x20,0x5f,0x31,0x37,
    0x30,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,
    0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x43,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x2c,
    0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 fs_contour[2];
    layout(location = 0) out vec4 fragColor;
    in vec2 vxPosition;
    
    void main()
    {
        fragColor = vec4(mix(fs_contour[0].xyz, fs_contour[1].xyz, vec3(fs_contour[1].w)), 1.0);
    }
    
*/
static const char debug_contour_source_glsl330[215] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x63,0x6f,
    0x6e,0x74,0x6f,0x75,0x72,0x5b,0x32,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,
    0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x78,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x6d,0x69,0x78,0x28,0x66,
    0x73,0x5f,0x63,0x6f,0x6e,0x74,0x6f,0x75,0x72,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,
    0x2c,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6e,0x74,0x6f,0x75,0x72,0x5b,0x31,0x5d,0x2e,
    0x78,0x79,0x7a,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x73,0x5f,0x63,0x6f,0x6e,
    0x74,0x6f,0x75,0x72,0x5b,0x31,0x5d,0x2e,0x77,0x29,0x29,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before shaders.glsl.h"
#endif
static inline const sg_shader_desc* rive_debug_contour_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 192;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 12;
      desc.fs.source = debug_contour_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].uniforms[0].name = "fs_contour";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 2;
      desc.label = "rive_debug_contour_shader";
    };
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* rive_shader_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 192;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 12;
      desc.fs.source = fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 544;
      desc.fs.uniform_blocks[0].uniforms[0].name = "fs_paint";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 34;
      desc.label = "rive_shader_shader";
    };
    return &desc;
  }
  return 0;
}
